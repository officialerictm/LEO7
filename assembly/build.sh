#!/usr/bin/env bash
# Leonardo AI Universal - Assembly Build Script
# Version: 7.0.0
# This script assembles all components into a single executable

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
MANIFEST_FILE="$SCRIPT_DIR/manifest.yaml"
OUTPUT_FILE="$PROJECT_ROOT/leonardo.sh"
BUILD_DIR="$SCRIPT_DIR/build"
TEMP_FILE="$BUILD_DIR/leonardo_temp.sh"

# Banner
print_banner() {
    echo -e "${CYAN}"
    echo "╔═══════════════════════════════════════════════════════╗"
    echo "║          Leonardo AI Universal - Assembler            ║"
    echo "║                    Version 7.0.0                      ║"
    echo "╚═══════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Check dependencies
check_dependencies() {
    log_info "Checking dependencies..."
    
    # Check for required tools
    local deps=("yq" "shellcheck")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        log_error "Missing dependencies: ${missing[*]}"
        log_info "Install with: sudo apt-get install ${missing[*]}"
        return 1
    fi
    
    log_success "All dependencies satisfied"
    return 0
}

# Parse YAML manifest
parse_manifest() {
    log_info "Parsing manifest file..."
    
    if [ ! -f "$MANIFEST_FILE" ]; then
        log_error "Manifest file not found: $MANIFEST_FILE"
        return 1
    fi
    
    # Validate YAML syntax
    if ! yq eval '.' "$MANIFEST_FILE" > /dev/null 2>&1; then
        log_error "Invalid YAML syntax in manifest"
        return 1
    fi
    
    log_success "Manifest parsed successfully"
    return 0
}

# Create build directory
setup_build_env() {
    log_info "Setting up build environment..."
    
    # Clean and create build directory
    rm -rf "$BUILD_DIR"
    mkdir -p "$BUILD_DIR"
    
    log_success "Build environment ready"
}

# Extract component info from manifest
get_component_info() {
    local component_id="$1"
    local field="$2"
    
    yq eval ".components[] | select(.id == \"$component_id\") | .$field" "$MANIFEST_FILE"
}

# Get all component IDs in order
get_component_order() {
    yq eval '.components[].id' "$MANIFEST_FILE"
}

# Check if file exists
validate_component_file() {
    local component_id="$1"
    local file_path="$2"
    local full_path="$PROJECT_ROOT/$file_path"
    
    if [ ! -f "$full_path" ]; then
        log_warning "Component file not found: $full_path (component: $component_id)"
        log_info "Creating stub file..."
        
        # Create directory if needed
        mkdir -p "$(dirname "$full_path")"
        
        # Create stub file
        cat > "$full_path" << EOF
#!/usr/bin/env bash
# ==============================================================================
# Leonardo AI Universal - Component: $component_id
# ==============================================================================
# Description: $(get_component_info "$component_id" "description")
# Path: $file_path
# Dependencies: $(get_component_info "$component_id" "dependencies[]" | tr '\n' ' ')
# ==============================================================================

# TODO: Implement $component_id component

log_message "INFO" "Component $component_id loaded"
EOF
        
        chmod +x "$full_path"
        return 1
    fi
    
    return 0
}

# Build header
build_header() {
    log_info "Building script header..."
    
    cat > "$TEMP_FILE" << 'EOF'
#!/usr/bin/env bash
# ==============================================================================
# Leonardo AI Universal - Portable AI Deployment System
# ==============================================================================
# Version: 7.0.0
# Authors: Eric TM and AI Assistant Team
# License: MIT
# 
# This file was automatically generated by the Leonardo assembly system.
# DO NOT EDIT THIS FILE DIRECTLY - edit the source components instead.
# ==============================================================================

set -euo pipefail

# Ensure we're running with bash 4.0+
if [ "${BASH_VERSION%%.*}" -lt 4 ]; then
    echo "Error: Leonardo requires Bash 4.0 or higher"
    echo "Your version: $BASH_VERSION"
    exit 1
fi

# Start timestamp
LEONARDO_START_TIME=$(date +%s)

EOF
    
    log_success "Header built"
}

# Assemble components
assemble_components() {
    log_info "Assembling components..."
    
    local component_count=0
    local total_components=$(get_component_order | wc -l)
    
    while IFS= read -r component_id; do
        [ -z "$component_id" ] && continue
        
        component_count=$((component_count + 1))
        local progress=$((component_count * 100 / total_components))
        
        echo -ne "\r${BLUE}[INFO]${NC} Assembling components... [${progress}%] ${component_id}                    "
        
        local file_path=$(get_component_info "$component_id" "path")
        local full_path="$PROJECT_ROOT/$file_path"
        
        # Add component separator
        echo -e "\n\n# ==== Component: $component_id ====" >> "$TEMP_FILE"
        echo "# Path: $file_path" >> "$TEMP_FILE"
        echo "# Description: $(get_component_info "$component_id" "description")" >> "$TEMP_FILE"
        echo "" >> "$TEMP_FILE"
        
        # Check if file exists, create stub if not
        if validate_component_file "$component_id" "$file_path"; then
            # Include the component (skip shebang and empty lines at start)
            tail -n +2 "$full_path" | sed '/^[[:space:]]*$/d' >> "$TEMP_FILE"
        else
            # Include stub content
            tail -n +2 "$full_path" >> "$TEMP_FILE"
        fi
        
    done < <(get_component_order)
    
    echo -e "\n${GREEN}[SUCCESS]${NC} All components assembled"
}

# Build footer
build_footer() {
    log_info "Building script footer..."
    
    cat >> "$TEMP_FILE" << 'EOF'

# ==============================================================================
# End of Leonardo AI Universal
# ==============================================================================

# Calculate runtime
LEONARDO_END_TIME=$(date +%s)
LEONARDO_RUNTIME=$((LEONARDO_END_TIME - LEONARDO_START_TIME))

# If we got here without calling main, call it now
if [ "${LEONARDO_MAIN_CALLED:-false}" = "false" ]; then
    main "$@"
fi
EOF
    
    log_success "Footer built"
}

# Validate assembled script
validate_script() {
    log_info "Validating assembled script..."
    
    # Basic syntax check
    if ! bash -n "$TEMP_FILE" 2>/dev/null; then
        log_error "Syntax validation failed"
        return 1
    fi
    
    # Run shellcheck if validation enabled
    if [ "$(yq eval '.validation.verify_syntax' "$MANIFEST_FILE")" = "true" ]; then
        log_info "Running shellcheck..."
        if ! shellcheck -x "$TEMP_FILE" 2>/dev/null; then
            log_warning "Shellcheck found issues (non-fatal)"
        fi
    fi
    
    log_success "Validation complete"
    return 0
}

# Finalize build
finalize_build() {
    log_info "Finalizing build..."
    
    # Move temp file to final location
    mv "$TEMP_FILE" "$OUTPUT_FILE"
    
    # Make executable
    chmod +x "$OUTPUT_FILE"
    
    # Get file size
    local size=$(du -h "$OUTPUT_FILE" | cut -f1)
    
    log_success "Build complete!"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✓${NC} Output file: ${BOLD}$OUTPUT_FILE${NC}"
    echo -e "${GREEN}✓${NC} File size: ${BOLD}$size${NC}"
    echo -e "${GREEN}✓${NC} Components: ${BOLD}$(get_component_order | wc -l)${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "\nRun ${BOLD}./leonardo.sh${NC} to start Leonardo AI Universal"
}

# Cleanup on exit
cleanup() {
    if [ -d "$BUILD_DIR" ]; then
        rm -rf "$BUILD_DIR"
    fi
}

# Main build process
main() {
    print_banner
    
    # Set trap for cleanup
    trap cleanup EXIT
    
    # Check dependencies (continue even if some are missing)
    check_dependencies || log_warning "Continuing without all dependencies..."
    
    # Parse manifest
    parse_manifest || exit 1
    
    # Setup build environment
    setup_build_env || exit 1
    
    # Build script
    build_header || exit 1
    assemble_components || exit 1
    build_footer || exit 1
    
    # Validate if enabled
    if [ "$(yq eval '.validation.check_dependencies' "$MANIFEST_FILE")" = "true" ]; then
        validate_script || log_warning "Validation issues found (non-fatal)"
    fi
    
    # Finalize
    finalize_build || exit 1
    
    # Run post-build hooks
    log_info "Running post-build hooks..."
    while IFS= read -r hook; do
        [ -z "$hook" ] && continue
        log_info "Hook: $hook"
        eval "$hook"
    done < <(yq eval '.hooks.post_build[]' "$MANIFEST_FILE")
    
    return 0
}

# Run main
main "$@"
